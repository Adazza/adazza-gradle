/*
The core plugin hooks up repository and publishing plugins.

It should not be applied directly.
*/
buildscript {
  repositories { jcenter() }
  dependencies {
    classpath 'com.netflix.nebula:nebula-publishing-plugin:8.1.1'
    classpath 'com.netflix.nebula:nebula-release-plugin:6.3.5'
  }
}
apply plugin: "idea"

allprojects {
  apply plugin: nebula.plugin.publishing.publications.JavadocJarPlugin
  apply plugin: nebula.plugin.publishing.publications.SourceJarPlugin
  apply plugin: nebula.plugin.release.ReleasePlugin
  apply plugin: nebula.plugin.publishing.maven.MavenPublishPlugin

  repositories {
    mavenCentral()
    jcenter()
    mavenLocal()
    maven {
      url "s3://adazza-maven-repo/release"
      authentication {
         awsIm(AwsImAuthentication) // load from EC2 role or env var
      }
    }
    maven {
      url "s3://adazza-maven-repo/snapshot"
      authentication {
        awsIm(AwsImAuthentication) // load from EC2 role or env var
      }
    }
  }

  publishing {
    publications {
      nebula(MavenPublication) {
        //https://docs.gradle.org/4.8.1/userguide/publishing_maven.html#publishing_maven:deferred_configuration
        //to upgrade to 5.0
        // Include scala version in the artifactId when publishing adazza libraries
        artifactId("${project.getName()}_$scalaVersion")
      }
    }
    repositories {
      maven {
        authentication {
          awsIm(AwsImAuthentication) // load from EC2 role or env var
        }
        if (project.version.toString().contains('SNAPSHOT')) {
          url "s3://adazza-maven-repo/snapshot"
        } else {
          url "s3://adazza-maven-repo/release"
        }
      }
    }
  }

  idea {
    module {
      downloadJavadoc = true // defaults to false
      downloadSources = true
    }
  }
}

/*
Apply this plugin to the root build file to configure your service.
*/
buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.netflix.nebula:gradle-ospackage-plugin:4.4.2'
  }
}
// If your root project is foo-service the name is foo.
// The submodules for your service will then be foo-api, 
// foo-server, foo-client.
def serviceName = rootProject.name.replace('-service', '')

subprojects {
  apply from: "https://raw.githubusercontent.com/adazza/adazza-gradle/${gradleBranch}/adazza-scala.gradle"
}

apply from: "https://raw.githubusercontent.com/adazza/adazza-gradle/${gradleBranch}/adazza-core.gradle"

configure(subprojects.findAll { it.name.endsWith('-api') }) {

}

configure(subprojects.findAll { it.name.endsWith('-client') }) {
  dependencies {
    compile project(":${serviceName}-api")
  }
}

configure(subprojects.findAll { it.name.endsWith('-server') }) {
  def adazzaServiceUser = 'adazzaservice'
  def package_arch = 'amd64'
  apply plugin: 'application'
  apply plugin: com.netflix.gradle.plugins.application.OspackageApplicationDaemonPlugin

  ospackage {
    os = 'LINUX' // only applied to RPM
    //Versions don't allow - or ~ so we replace with .
    version = project.version.toString().replace('~', '.').replace('-', '.')
    arch = package_arch
  }

  //We pass the service name, the version then the artifact containing the server.
  //ex: foo 1.0.0 foo-server
  applicationdaemon {
    user = adazzaServiceUser
    command = "/opt/adazza/bin/start-adazza-service $serviceName $project.version $project.name"
    autoStart = false
  }

  dependencies {
    compile project(":${serviceName}-api")

    compile "com.twitter:finatra-http_$scalaVersion"
    compile "com.twitter:finatra-thrift_$scalaVersion"

    compile group: 'com.amazonaws', name: 'aws-java-sdk-dynamodb'

    compile group: 'com.adazza.common', name: "common-finagle_$scalaVersion"
    compile group: 'com.adazza.common', name: "common-finatra_$scalaVersion"
    compile group: 'com.adazza.common', name: "common-api_$scalaVersion"
    compile group: 'com.adazza.common', name: "common-utils_$scalaVersion"

    compile "ch.qos.logback:logback-classic"

    testCompile group: 'org.scalatest', name: "scalatest_$scalaVersion"
    testCompile 'junit:junit'

    testCompile "com.adazza.common:common-testing_$scalaVersion"
    testCompile "com.twitter:finatra-http_$scalaVersion:$finatraVersion:tests"
    testCompile "com.twitter:finatra-thrift_$scalaVersion:$finatraVersion:tests"

    testCompile "com.twitter:inject-app_$scalaVersion:$finatraVersion:tests"
    testCompile "com.twitter:inject-core_$scalaVersion:$finatraVersion:tests"
    testCompile "com.twitter:inject-server_$scalaVersion:$finatraVersion:tests"
    testCompile "com.twitter:inject-modules_$scalaVersion:$finatraVersion:tests"

    testCompile "com.google.inject.extensions:guice-testlib"
    testCompile 'org.mockito:mockito-core'
  }

  run {
    if (System.getProperty("exec.args") != null) {
      args System.getProperty("exec.args").split()
    }
  }

  task publishDeb(type: Exec) {
    workingDir "$project.projectDir"
    commandLine 'deb-s3', 'upload', '--lock', '--visibility=private',
        '--bucket=adazza-deb-repo', '--prefix=repo', '--origin=jenkins',
        '--s3-region=us-west-1', '--sign="Adazza Deb Repo"',
        '-c', 'stable', '-m', 'services',
        "$project.buildDir/distributions/${project.name}_${version}_${package_arch}.deb"
  }

  publishDeb.dependsOn buildDeb
}
